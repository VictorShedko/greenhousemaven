//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.12.18 at 06:59:08 PM MSK 
//


package by.victor.greenhouse.entity;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * <p>Java class for Plant complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Plant">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="visual-parameters" type="{http://by.victor.epam}Visual-parameters" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="growing-tips" type="{http://by.victor.epam}Growing-tips" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="multiplying" type="{http://by.victor.epam}Multiplying-type" maxOccurs="3" minOccurs="0"/>
 *         &lt;element name="soil" type="{http://by.victor.epam}SoilType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="capriciousness" type="{http://by.victor.epam}Capriciousness" default="medium" />
 *       &lt;attribute name="title" use="required" type="{http://by.victor.epam}PlantTitle" />
 *       &lt;attribute name="origin" type="{http://by.victor.epam}Origin" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Plant", propOrder = {
    "visualParameters",
    "growingTips",
    "multiplying",
    "soil"
})
@XmlSeeAlso({
    Flower.class
})
public class Plant {

    @XmlElement(name = "visual-parameters")
    protected List<VisualParameters> visualParameters;
    @XmlElement(name = "growing-tips")
    protected List<GrowingTips> growingTips;
    @XmlSchemaType(name = "string")
    protected List<MultiplyingType> multiplying;
    @XmlSchemaType(name = "string")
    protected List<SoilType> soil;
    @XmlAttribute(name = "capriciousness")
    protected Capriciousness capriciousness;
    @XmlAttribute(name = "title", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    protected String title;
    @XmlAttribute(name = "origin")
    protected String origin;

    /**
     * Gets the value of the visualParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the visualParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVisualParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link VisualParameters }
     * 
     * 
     */
    public List<VisualParameters> getVisualParameters() {
        if (visualParameters == null) {
            visualParameters = new ArrayList<VisualParameters>();
        }
        return this.visualParameters;
    }

    /**
     * Gets the value of the growingTips property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the growingTips property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGrowingTips().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GrowingTips }
     * 
     * 
     */
    public List<GrowingTips> getGrowingTips() {
        if (growingTips == null) {
            growingTips = new ArrayList<GrowingTips>();
        }
        return this.growingTips;
    }

    /**
     * Gets the value of the multiplying property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the multiplying property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMultiplying().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MultiplyingType }
     * 
     * 
     */
    public List<MultiplyingType> getMultiplying() {
        if (multiplying == null) {
            multiplying = new ArrayList<MultiplyingType>();
        }
        return this.multiplying;
    }

    /**
     * Gets the value of the soil property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the soil property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSoil().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SoilType }
     * 
     * 
     */
    public List<SoilType> getSoil() {
        if (soil == null) {
            soil = new ArrayList<SoilType>();
        }
        return this.soil;
    }

    /**
     * Gets the value of the capriciousness property.
     * 
     * @return
     *     possible object is
     *     {@link Capriciousness }
     *     
     */
    public Capriciousness getCapriciousness() {
        if (capriciousness == null) {
            return Capriciousness.MEDIUM;
        } else {
            return capriciousness;
        }
    }

    /**
     * Sets the value of the capriciousness property.
     * 
     * @param value
     *     allowed object is
     *     {@link Capriciousness }
     *     
     */
    public void setCapriciousness(Capriciousness value) {
        this.capriciousness = value;
    }

    /**
     * Gets the value of the title property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTitle(String value) {
        this.title = value;
    }

    /**
     * Gets the value of the origin property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOrigin() {
        return origin;
    }

    /**
     * Sets the value of the origin property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOrigin(String value) {
        this.origin = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Plant plant = (Plant) o;
        return Objects.equals(visualParameters, plant.visualParameters) &&
                Objects.equals(growingTips, plant.growingTips) &&
                Objects.equals(multiplying, plant.multiplying) &&
                Objects.equals(soil, plant.soil) &&
                capriciousness == plant.capriciousness &&
                Objects.equals(title, plant.title) &&
                Objects.equals(origin, plant.origin);
    }

    @Override
    public int hashCode() {
        return Objects.hash(visualParameters, growingTips, multiplying, soil, capriciousness, title, origin);
    }
}
