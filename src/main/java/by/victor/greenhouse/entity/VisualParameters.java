//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.12.18 at 06:59:08 PM MSK 
//


package by.victor.greenhouse.entity;

import java.math.BigInteger;
import java.util.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Visual-parameters complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Visual-parameters">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element name="stick-color" type="{http://by.victor.epam}Color"/>
 *         &lt;element name="leaf-color" type="{http://by.victor.epam}Color"/>
 *         &lt;element name="height" type="{http://www.w3.org/2001/XMLSchema}positiveInteger" minOccurs="0"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Visual-parameters", propOrder = {
    "stickColor",
    "leafColor",
    "height"
})
public class VisualParameters {

    @XmlElement(name = "stick-color")
    @XmlSchemaType(name = "string")
    protected Color stickColor;
    @XmlElement(name = "leaf-color")
    @XmlSchemaType(name = "string")
    protected Color leafColor;
    @XmlSchemaType(name = "positiveInteger")
    protected BigInteger height;

    /**
     * Gets the value of the stickColor property.
     * 
     * @return
     *     possible object is
     *     {@link Color }
     *     
     */
    public Color getStickColor() {
        return stickColor;
    }

    /**
     * Sets the value of the stickColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link Color }
     *     
     */
    public void setStickColor(Color value) {
        this.stickColor = value;
    }

    /**
     * Gets the value of the leafColor property.
     * 
     * @return
     *     possible object is
     *     {@link Color }
     *     
     */
    public Color getLeafColor() {
        return leafColor;
    }

    /**
     * Sets the value of the leafColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link Color }
     *     
     */
    public void setLeafColor(Color value) {
        this.leafColor = value;
    }

    /**
     * Gets the value of the height property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getHeight() {
        return height;
    }

    /**
     * Sets the value of the height property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setHeight(BigInteger value) {
        this.height = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        VisualParameters that = (VisualParameters) o;
        return stickColor == that.stickColor &&
                leafColor == that.leafColor &&
                Objects.equals(height, that.height);
    }

    @Override
    public int hashCode() {
        return Objects.hash(stickColor, leafColor, height);
    }
}
